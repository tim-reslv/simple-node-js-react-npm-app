# Node.js with React
# Build a Node.js project that uses React.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- main

pool: Default
#  vmImage: ubuntu-latest

variables:
- name: dockerRegistryServiceConnection
  value: docker_reslv_io
- name: containerRegistry
  value: docker.reslv.io/pwc
- name: image-name
  value: pwc/simple-node-js-react-npm-app
- name: image-tag
  value: $(Build.BuildNumber)
- name: imagePullSecret
  value: docker.reslv.io

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool: Default

    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'
    
    - script: |
        npm install
      displayName: 'npm install'
    
    # Prepare Analysis Configuration task
    - task: SonarQubePrepare@4
      displayName: 'Prepare SonarQube Analysis'
      inputs:
        SonarQube: 'sonarqube'
        scannerMode: 'CLI'
        configMode: 'manual'
        cliProjectKey: 'pwc_pwc:master'
        cliSources: '.'
    
    - script: |
        npm run build
      displayName: 'npm build'
    
    # Run Code Analysis task
    - task: SonarQubeAnalyze@4
      displayName: 'SonarQube Analyze'
    
    # Publish Quality Gate Result task
    - task: SonarQubePublish@4
      displayName: 'Publish SonarQube Scan Result'
      inputs:
        pollingTimeoutSec: '300'
    
    - task: Docker@2
      displayName: Build docker image
      inputs:
        repository: $(image-name)
        containerRegistry: $(dockerRegistryServiceConnection)
        command: build
        Dockerfile: Dockerfile
        tags: $(image-tag)
    
    - task: Docker@2
      displayName: Push docker image
      inputs:
        repository: $(image-name)
        containerRegistry: $(dockerRegistryServiceConnection)
        command: push
        Dockerfile: Dockerfile
        tags: $(image-tag)

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool: Default
    environment: 'dev'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              kubernetesServiceConnection: pwck8s
              namespace: default
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              kubernetesServiceConnection: pwck8s
              namespace: default
              action: deploy
              manifests: |
                manifests/deployment.yml
                manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)